from sqlmodel import SQLModel, Field, Relationship
from typing import List, Optional, Literal, Union
from datetime import datetime
from uuid import UUID, uuid4
import json

# Import the User model to create a relationship
from .user import User

# --- Schemas for complex data (not DB tables) ---
class StaticSegmentSource(SQLModel):
    source_type: Literal["static"] = "static"
    filename: str

class AIGeneratedSegmentSource(SQLModel):
    source_type: Literal["ai_generated"] = "ai_generated"
    prompt: str
    voice_id: str = "19B4gjtpL5m876wS3Dfg"

class TTSSegmentSource(SQLModel):
    source_type: Literal["tts"] = "tts"
    script: str = ""
    voice_id: str = "19B4gjtpL5m876wS3Dfg"

class TemplateSegment(SQLModel):
    id: UUID = Field(default_factory=uuid4)
    segment_type: Literal["intro", "content", "outro", "commercial", "sound_effect", "transition"]
    source: Union[StaticSegmentSource, AIGeneratedSegmentSource, TTSSegmentSource] = Field(..., discriminator='source_type')

class BackgroundMusicRule(SQLModel):
    id: UUID = Field(default_factory=uuid4)
    music_filename: str
    apply_to_segments: List[Literal["intro", "content", "outro"]]
    start_offset_s: float = 0.0
    end_offset_s: float = 0.0
    fade_in_s: float = 2.0
    fade_out_s: float = 3.0
    volume_db: int = -15

class SegmentTiming(SQLModel):
    content_start_offset_s: float = -2.0
    outro_start_offset_s: float = -5.0

# --- NEW: Schema for API Input ---
class PodcastTemplateCreate(SQLModel):
    """This model is used to receive data from the frontend."""
    name: str
    segments: List[TemplateSegment]
    background_music_rules: List[BackgroundMusicRule] = []
    timing: SegmentTiming = Field(default_factory=SegmentTiming)

# --- Database Table Model ---
class PodcastTemplate(SQLModel, table=True):
    id: UUID = Field(default_factory=uuid4, primary_key=True, index=True)
    name: str
    user_id: UUID = Field(foreign_key="user.id")
    user: Optional[User] = Relationship(back_populates="templates")

    # Store complex data as JSON strings in the database
    segments_json: str = Field(default="[]")
    background_music_rules_json: str = Field(default="[]")
    timing_json: str = Field(default_factory=lambda: SegmentTiming().model_dump_json())

# --- NEW: Schema for API Output ---
class PodcastTemplatePublic(PodcastTemplateCreate):
    """This model is used to send data back to the frontend."""
    id: UUID
    user_id: UUID
# --- Media Library Models ---

class MediaItem(SQLModel, table=True):
    """Represents a single uploaded media file (intro, music, etc.)."""
    id: UUID = Field(default_factory=uuid4, primary_key=True, index=True)
    filename: str
    content_type: str
    filesize: int
    
    # Link to the user who owns this file
    user_id: UUID = Field(foreign_key="user.id")
    user: Optional[User] = Relationship()

    created_at: datetime = Field(default_factory=datetime.utcnow)
